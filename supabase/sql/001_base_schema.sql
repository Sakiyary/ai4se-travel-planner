-- Base schema for AI Travel Planner

create extension if not exists pgcrypto;

create table if not exists public.profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  email text not null unique,
  display_name text,
  preferences jsonb default '{}'::jsonb,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists public.plans (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references public.profiles(id) on delete cascade,
  title text not null,
  destination text,
  start_date date,
  end_date date,
  party_size smallint,
  budget numeric(12,2),
  currency text default 'CNY',
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table if not exists public.plan_segments (
  id uuid primary key default gen_random_uuid(),
  plan_id uuid not null references public.plans(id) on delete cascade,
  day_index integer not null,
  time_slot text,
  activity_type text,
  location_id text,
  details jsonb default '{}'::jsonb,
  created_at timestamptz default now()
);

create table if not exists public.expenses (
  id uuid primary key default gen_random_uuid(),
  plan_id uuid not null references public.plans(id) on delete cascade,
  amount numeric(12,2) not null,
  currency text default 'CNY',
  category text,
  method text,
  source text default 'manual',
  notes text,
  timestamp timestamptz default now(),
  created_at timestamptz default now()
);

create table if not exists public.voice_notes (
  id uuid primary key default gen_random_uuid(),
  plan_id uuid not null references public.plans(id) on delete cascade,
  storage_path text not null,
  transcript text,
  duration_seconds integer,
  created_at timestamptz default now()
);

create table if not exists public.audit_logs (
  id bigint generated always as identity primary key,
  user_id uuid references public.profiles(id) on delete set null,
  action text not null,
  metadata jsonb default '{}'::jsonb,
  created_at timestamptz default now()
);

create index if not exists idx_plans_user_id on public.plans(user_id);
create index if not exists idx_plan_segments_plan on public.plan_segments(plan_id, day_index);
create index if not exists idx_expenses_plan on public.expenses(plan_id, timestamp desc);
create index if not exists idx_voice_notes_plan on public.voice_notes(plan_id, created_at);

alter table public.profiles enable row level security;
alter table public.plans enable row level security;
alter table public.plan_segments enable row level security;
alter table public.expenses enable row level security;
alter table public.voice_notes enable row level security;
alter table public.audit_logs enable row level security;

create policy "Profiles: self read" on public.profiles
  for select using (auth.uid() = id);
create policy "Profiles: self insert" on public.profiles
  for insert with check (auth.uid() = id);
create policy "Profiles: self update" on public.profiles
  for update using (auth.uid() = id) with check (auth.uid() = id);

create policy "Plans: owner read" on public.plans
  for select using (auth.uid() = user_id);
create policy "Plans: owner write" on public.plans
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy "Plan segments: owner access" on public.plan_segments
  for all using (
    exists (
      select 1 from public.plans p
      where p.id = plan_segments.plan_id and p.user_id = auth.uid()
    )
  );

create policy "Expenses: owner access" on public.expenses
  for all using (
    exists (
      select 1 from public.plans p
      where p.id = expenses.plan_id and p.user_id = auth.uid()
    )
  );

create policy "Voice notes: owner access" on public.voice_notes
  for all using (
    exists (
      select 1 from public.plans p
      where p.id = voice_notes.plan_id and p.user_id = auth.uid()
    )
  );

create policy "Audit logs: owner read" on public.audit_logs
  for select using (user_id = auth.uid());
create policy "Audit logs: owner insert" on public.audit_logs
  for insert with check (user_id = auth.uid());

comment on table public.profiles is 'User profile metadata linked to Supabase auth.users.';
comment on table public.plans is 'Travel plans generated by the AI planner.';
comment on table public.plan_segments is 'Daily segments for a plan, including activities and locations.';
comment on table public.expenses is 'Expense entries associated with plans for budgeting.';
comment on table public.voice_notes is 'Voice notes stored in Supabase Storage with transcripts.';
comment on table public.audit_logs is 'Audit trail for AI interactions and significant user actions.';
